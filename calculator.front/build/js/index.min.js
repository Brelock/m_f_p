let status="JS - OK!",site=null;document.addEventListener("DOMContentLoaded",function(n){document.getElementsByTagName("body")||console.log("js error"),site=function(){window;const n=document;document.body;name=document.getElementsByClassName("mainWrapper");const e={Function(){},domReady(){name.length&&e.Function()}};return n.addEventListener("DOMContentLoaded",e.domReady()),e}()}),window.onload=function(){};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
